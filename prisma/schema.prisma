generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id
  username     String     @unique
  displayName  String
  email        String?    @unique
  passwordHash String?
  googleId     String?    @unique
  githubId     Int?       @unique
  avatarUrl    String?
  bio          String?
  posts        Post[]
  sessions     Session[]
  followers    Follow[]   @relation("following")
  following    Follow[]   @relation("follower")
  likes        Like[]
  bookmarks    Bookmark[]

  comments  Comment[]
  createdAt DateTime  @default(now())

  recievedNotification Notification[] @relation(name: "recipient")
  issuedNotification   Notification[] @relation(name: "issuer")

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("sessions")
}

model Follow {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@unique([followerId, followingId])
  @@map("follows")
}

model Post {
  id                 String         @id @default(cuid())
  content            String
  user               User           @relation(fields: [userId], references: [id])
  userId             String
  attachments        Media[]
  createdAt          DateTime       @default(now())
  likes              Like[]
  bookmarks          Bookmark[]
  comments           Comment[]
  linkedNotification Notification[]

  @@map("posts")
}

model Media {
  id        String    @id @default(uuid())
  post      Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)
  postId    String?
  type      MediaType
  url       String
  createdAt DateTime  @default(now())

  @@map("post_media")
}

enum MediaType {
  IMAGE
  VIDEO
}

model Like {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  @@unique([userId, postId])
  @@map("likes")
}

model Bookmark {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("bookmarks")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())

  @@map("comments")
}

model Notification {
  id          String           @id @default(cuid())
  recipientId String
  recipient   User             @relation("recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId    String
  issuer      User             @relation("issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  postId      String?
  post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  type        NotificationType
  read        Boolean          @default(false)

  createdAt DateTime @default(now())

  @@map("notifications")
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}
